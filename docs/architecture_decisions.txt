The existing UdaConnect service used the REST API for all communications. This is fine for most of the API endpoints with one exception: The "/locations" endpoint receives the location of the mobile phone and writes that location to the database. As the person moves around, the mobile phone constantly updates its location. This results in a very large amount of data, and the REST API is not a good solution for handling this. Thus, the location writing component can be separated into its own microservice. It uses gRPC instead of REST because it utilizes protobufs to transmit messages as binary data, thus reducing the overall size of the payload and thereby improving the speed. Instead of writing directly to the database, which would lead to blocking given a large amount of data, the location microservice writes to a Kafka message queue first, and another microservice pulls the data from Kafka then writes to the database. This solves both the data congestion and speed problems. So the overall design consists of two groups of microservices: one for location updating/writing using gRPC and Kafka, the other for the rest of the UdaConnect app functions using REST API.
